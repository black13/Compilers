Program: Decl+
       ;

Decl: VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl
    ;

VariableDecl: Variable ";"
            ;

VariableList : Variable | Variable ", " VariableList
             ;

Variable: Type " " ident
        ;

Type: "int " | "double " | "bool " | "string " | ident " " | Type "[] "
    ;

FunctionDecl:
  Type ident "(" Formals ")" StmtBlock |
  "void " ident "(" Formals ")" StmtBlock
  ;

Formals: VariableList | epsilon
       ;

ClassDecl:
  "class " ident (" extends " ident)?
  (" implements " identlist)?
  "{" Field* "}"
  "\n"
  ;

Field: VariableDecl | FunctionDecl
     ;

InterfaceDecl: "interface " ident " {" Prototype* "}"
             ;

Prototype: Type " " ident "(" Formals ")" ";" |
           "void " ident "(" Formals ")" ";"
         ;

StmtBlock: "{" VariableDecl* Stmt* "}";

Stmt:
  (Expr)?";" | IfStmt | WhileStmt | ForStmt | BreakStmt |
  ReturnStmt | PrintStmt | StmtBlock
  ;

IfStmt: "if " "(" Expr ")" Stmt (" else " Stmt)?
      ;

WhileStmt: "while " "(" Expr ")" Stmt
         ;

ForStmt: "for " "(" Expr? ";" Expr ";" Expr? ")" Stmt
       ;

ReturnStmt: "return" (" " Expr)? ";"
          ;

BreakStmt: "break" ";" 
         ;

PrintStmt: "Print" "(" ExprList ")" ";"
         ;

ExprList: Expr | Expr ", " ExprList
        ;

Expr:
  LValue " = " Expr | Constant | LValue" " | "this" | Call | "(" Expr ")" |
  Expr (" + " | " - " | " * " | " / " | " % ") Expr | "-" Expr |
  Expr (" < " | " <= " | " > " | " >= " | " == " | " != ") Expr |
  Expr (" && " | " || ") Expr | "!" Expr |
  "ReadInteger" "(" ")" | "ReadLine" "(" ")" |
  "new " ident | "NewArray" "(" Expr ",  " Type")"
  ;

LValue: ident | Expr "." ident | Expr "[" Expr "] "
      ;

Call: ident "(" Actuals ")" | Expr "." ident "(" Actuals ")"
    ;

Actuals: ExprList | epsilon
       ;

Constant:
  integerConstant | doubleConstant | boolConstant | stringConstant | "null ";

epsilon:
       ;

integerConstant: digit+ | "0" ("x", "X") digit+
               ;

doubleConstant: digit+ "." digit* (("e", "E")("+", "-")?digit+)?
              ;

boolConstant: "true" | "false"
            ;

stringConstant: "\"" stringContents "\""
              ;

stringContents: alphanumeric* | stringContents* | " "  
              ;

identlist: ident | ident ", " identlist
         ;

ident: alpha alphanumeric*
     ;

alphanumeric: alpha | digit
            ;

alpha: uc  | lc
     ;
uc:
  "A" |"B" |"C" |"D" |"E" |"F" |"G" |"H" |"I" |"J" |"K" |"L" |"M" |
  "N" |"O" |"P" |"Q" |"R" |"S" |"T" |"U" |"V" |"W" |"X" |"Y" |"Z"
  ;
lc:
  "a" |"b" |"c" |"d" |"e" |"f" |"g" |"h" |"i" |"j" |"k" |"l" |"m" |
  "n" |"o" |"p" |"q" |"r" |"s" |"t" |"u" |"v" |"w" |"x" |"y" |"z"
  ;
digit:
  "0" |"1" |"2" |"3" |"4" |"5" |"6" |"7" |"8" |"9"
  ;
