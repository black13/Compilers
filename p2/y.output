Nonterminals useless in grammar

   Constant


Terminals unused in grammar

   T_Class
   T_LessEqual
   T_GreaterEqual
   T_Equal
   T_NotEqual
   T_Dims
   T_And
   T_Or
   T_Null
   T_Extends
   T_This
   T_Implements
   T_While
   T_For
   T_If
   T_Else
   T_Return
   T_Break
   T_New
   T_NewArray
   T_Print
   T_ReadInteger
   T_ReadLine
   T_Increment
   T_Decrement
   T_Switch
   T_Case
   T_Default
   T_StringConstant
   T_IntConstant
   T_DoubleConstant
   T_BoolConstant


Rules useless in grammar

   24 Constant: T_IntConstant
   25         | T_DoubleConstant
   26         | T_StringConstant
   27         | T_BoolConstant
   28         | T_Null


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: DeclList Decl
    3         | Decl

    4 Decl: VarDecl
    5     | InterfaceDecl

    6 VarDecl: Variable ';'

    7 InterfaceDecl: T_Interface Identifier '{' ProtoList '}'

    8 ProtoList: ProtoList Prototype
    9          | Prototype

   10 Prototype: Type Identifier '(' Formals ')' ';'
   11          | T_Void Identifier '(' Formals ')' ';'

   12 Formals: VarList
   13        | /* empty */

   14 VarList: VarList ',' Variable
   15        | Variable

   16 Variable: Type Identifier

   17 Type: T_Int
   18     | T_Double
   19     | T_Bool
   20     | T_String
   21     | Identifier
   22     | Type '[' ']'

   23 Identifier: T_Identifier


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 11
')' (41) 10 11
',' (44) 14
';' (59) 6 10 11
'[' (91) 22
']' (93) 22
'{' (123) 7
'}' (125) 7
error (256)
T_Void (258) 11
T_Bool (259) 19
T_Int (260) 17
T_Double (261) 18
T_String (262) 20
T_Class (263)
T_LessEqual (264)
T_GreaterEqual (265)
T_Equal (266)
T_NotEqual (267)
T_Dims (268)
T_And (269)
T_Or (270)
T_Null (271)
T_Extends (272)
T_This (273)
T_Interface (274) 7
T_Implements (275)
T_While (276)
T_For (277)
T_If (278)
T_Else (279)
T_Return (280)
T_Break (281)
T_New (282)
T_NewArray (283)
T_Print (284)
T_ReadInteger (285)
T_ReadLine (286)
T_Increment (287)
T_Decrement (288)
T_Switch (289)
T_Case (290)
T_Default (291)
T_Identifier (292) 23
T_StringConstant (293)
T_IntConstant (294)
T_DoubleConstant (295)
T_BoolConstant (296)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
Program (51)
    on left: 1, on right: 0
DeclList (52)
    on left: 2 3, on right: 1 2
Decl (53)
    on left: 4 5, on right: 2 3
VarDecl (54)
    on left: 6, on right: 4
InterfaceDecl (55)
    on left: 7, on right: 5
ProtoList (56)
    on left: 8 9, on right: 7 8
Prototype (57)
    on left: 10 11, on right: 8 9
Formals (58)
    on left: 12 13, on right: 10 11
VarList (59)
    on left: 14 15, on right: 12 14
Variable (60)
    on left: 16, on right: 6 14 15
Type (61)
    on left: 17 18 19 20 21 22, on right: 10 16 22
Identifier (62)
    on left: 23, on right: 7 10 11 16 21


state 0

    0 $accept: . Program $end

    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Interface   shift, and go to state 5
    T_Identifier  shift, and go to state 6

    Program        go to state 7
    DeclList       go to state 8
    Decl           go to state 9
    VarDecl        go to state 10
    InterfaceDecl  go to state 11
    Variable       go to state 12
    Type           go to state 13
    Identifier     go to state 14


state 1

   19 Type: T_Bool .

    $default  reduce using rule 19 (Type)


state 2

   17 Type: T_Int .

    $default  reduce using rule 17 (Type)


state 3

   18 Type: T_Double .

    $default  reduce using rule 18 (Type)


state 4

   20 Type: T_String .

    $default  reduce using rule 20 (Type)


state 5

    7 InterfaceDecl: T_Interface . Identifier '{' ProtoList '}'

    T_Identifier  shift, and go to state 6

    Identifier  go to state 15


state 6

   23 Identifier: T_Identifier .

    $default  reduce using rule 23 (Identifier)


state 7

    0 $accept: Program . $end

    $end  shift, and go to state 16


state 8

    1 Program: DeclList .
    2 DeclList: DeclList . Decl

    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Interface   shift, and go to state 5
    T_Identifier  shift, and go to state 6

    $default  reduce using rule 1 (Program)

    Decl           go to state 17
    VarDecl        go to state 10
    InterfaceDecl  go to state 11
    Variable       go to state 12
    Type           go to state 13
    Identifier     go to state 14


state 9

    3 DeclList: Decl .

    $default  reduce using rule 3 (DeclList)


state 10

    4 Decl: VarDecl .

    $default  reduce using rule 4 (Decl)


state 11

    5 Decl: InterfaceDecl .

    $default  reduce using rule 5 (Decl)


state 12

    6 VarDecl: Variable . ';'

    ';'  shift, and go to state 18


state 13

   16 Variable: Type . Identifier
   22 Type: Type . '[' ']'

    T_Identifier  shift, and go to state 6
    '['           shift, and go to state 19

    Identifier  go to state 20


state 14

   21 Type: Identifier .

    $default  reduce using rule 21 (Type)


state 15

    7 InterfaceDecl: T_Interface Identifier . '{' ProtoList '}'

    '{'  shift, and go to state 21


state 16

    0 $accept: Program $end .

    $default  accept


state 17

    2 DeclList: DeclList Decl .

    $default  reduce using rule 2 (DeclList)


state 18

    6 VarDecl: Variable ';' .

    $default  reduce using rule 6 (VarDecl)


state 19

   22 Type: Type '[' . ']'

    ']'  shift, and go to state 22


state 20

   16 Variable: Type Identifier .

    $default  reduce using rule 16 (Variable)


state 21

    7 InterfaceDecl: T_Interface Identifier '{' . ProtoList '}'

    T_Void        shift, and go to state 23
    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Identifier  shift, and go to state 6

    ProtoList   go to state 24
    Prototype   go to state 25
    Type        go to state 26
    Identifier  go to state 14


state 22

   22 Type: Type '[' ']' .

    $default  reduce using rule 22 (Type)


state 23

   11 Prototype: T_Void . Identifier '(' Formals ')' ';'

    T_Identifier  shift, and go to state 6

    Identifier  go to state 27


state 24

    7 InterfaceDecl: T_Interface Identifier '{' ProtoList . '}'
    8 ProtoList: ProtoList . Prototype

    T_Void        shift, and go to state 23
    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Identifier  shift, and go to state 6
    '}'           shift, and go to state 28

    Prototype   go to state 29
    Type        go to state 26
    Identifier  go to state 14


state 25

    9 ProtoList: Prototype .

    $default  reduce using rule 9 (ProtoList)


state 26

   10 Prototype: Type . Identifier '(' Formals ')' ';'
   22 Type: Type . '[' ']'

    T_Identifier  shift, and go to state 6
    '['           shift, and go to state 19

    Identifier  go to state 30


state 27

   11 Prototype: T_Void Identifier . '(' Formals ')' ';'

    '('  shift, and go to state 31


state 28

    7 InterfaceDecl: T_Interface Identifier '{' ProtoList '}' .

    $default  reduce using rule 7 (InterfaceDecl)


state 29

    8 ProtoList: ProtoList Prototype .

    $default  reduce using rule 8 (ProtoList)


state 30

   10 Prototype: Type Identifier . '(' Formals ')' ';'

    '('  shift, and go to state 32


state 31

   11 Prototype: T_Void Identifier '(' . Formals ')' ';'

    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Identifier  shift, and go to state 6

    $default  reduce using rule 13 (Formals)

    Formals     go to state 33
    VarList     go to state 34
    Variable    go to state 35
    Type        go to state 13
    Identifier  go to state 14


state 32

   10 Prototype: Type Identifier '(' . Formals ')' ';'

    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Identifier  shift, and go to state 6

    $default  reduce using rule 13 (Formals)

    Formals     go to state 36
    VarList     go to state 34
    Variable    go to state 35
    Type        go to state 13
    Identifier  go to state 14


state 33

   11 Prototype: T_Void Identifier '(' Formals . ')' ';'

    ')'  shift, and go to state 37


state 34

   12 Formals: VarList .
   14 VarList: VarList . ',' Variable

    ','  shift, and go to state 38

    $default  reduce using rule 12 (Formals)


state 35

   15 VarList: Variable .

    $default  reduce using rule 15 (VarList)


state 36

   10 Prototype: Type Identifier '(' Formals . ')' ';'

    ')'  shift, and go to state 39


state 37

   11 Prototype: T_Void Identifier '(' Formals ')' . ';'

    ';'  shift, and go to state 40


state 38

   14 VarList: VarList ',' . Variable

    T_Bool        shift, and go to state 1
    T_Int         shift, and go to state 2
    T_Double      shift, and go to state 3
    T_String      shift, and go to state 4
    T_Identifier  shift, and go to state 6

    Variable    go to state 41
    Type        go to state 13
    Identifier  go to state 14


state 39

   10 Prototype: Type Identifier '(' Formals ')' . ';'

    ';'  shift, and go to state 42


state 40

   11 Prototype: T_Void Identifier '(' Formals ')' ';' .

    $default  reduce using rule 11 (Prototype)


state 41

   14 VarList: VarList ',' Variable .

    $default  reduce using rule 14 (VarList)


state 42

   10 Prototype: Type Identifier '(' Formals ')' ';' .

    $default  reduce using rule 10 (Prototype)
